name: .NET CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        install-dir: ${{ runner.temp }}/.dotnet

    - name: Add .NET to PATH
      run: echo "${{ runner.temp }}/.dotnet" >> $env:GITHUB_PATH
      shell: powershell

    - name: Add dotnet tools to PATH
      run: echo "$env:USERPROFILE\.dotnet\tools" >> $env:GITHUB_PATH
      shell: powershell

    - name: Begin SonarQube analysis
      run: |
        dotnet sonarscanner begin `
          /k:"eventary-api" `
          /d:sonar.host.url="http://localhost:9000" `
          /d:sonar.login="${{ secrets.SONAR_TOKEN }}" `
          /d:sonar.cs.opencover.reportsPaths="Unittest/TestResults/coverage.opencover.xml" `
          /d:sonar.scanner.scanAll=false
      shell: powershell

    - name: Restore dependencies
      run: dotnet restore ./Eventary-API.sln
      shell: powershell

    - name: Build Solution
      run: dotnet build ./Eventary-API.sln --no-restore --configuration Debug
      shell: powershell

    - name: Run Unit Tests with OpenCover Coverage
      run: dotnet test ./Unittest/Unittest.csproj `
            /p:CollectCoverage=true `
            /p:CoverletOutputFormat=opencover `
            /p:CoverletOutput=TestResults/ `
            --results-directory ./Unittest/TestResults `
            --no-build --configuration Debug
      shell: powershell

    - name: Check if OpenCover coverage file exists
      run: |
        if (Test-Path "Unittest/TestResults/coverage.opencover.xml") {
          Write-Host "Coverage file found"
        } else {
          Write-Error "Coverage file NOT found"
        }
      shell: powershell

    - name: End SonarQube analysis
      run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      shell: powershell

    - name: Build for Deployment
      if: ${{ success() }}
      run: dotnet build ./Eventary-API.sln --configuration Release --no-restore
      shell: powershell

  docker:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v4

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker Image
      run: docker build -t eventary-api:v1 -f ./Dockerfile .

    - name: Push Docker Image to DockerHub
      run: |
        docker tag eventary-api:v1 ${{ secrets.DOCKER_USERNAME }}/eventary-api:v1
        docker tag eventary-api:v1 ${{ secrets.DOCKER_USERNAME }}/eventary-api:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/eventary-api:v1
        docker push ${{ secrets.DOCKER_USERNAME }}/eventary-api:latest
