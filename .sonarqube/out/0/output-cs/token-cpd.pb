ß	
bD:\Fontys\2025-2026\Semester 3.1\Individueel project\Eventary\Eventary-API\CORE\Dto\CategoryDto.cs
	namespace 	
CORE
 
. 
Dto 
{ 
public 

class 
CategoryDto 
{ 
[ 	
Required	 
] 
public 
required "
long# '
Id( *
{+ ,
get- 0
;0 1
set2 5
;5 6
}7 8
[ 	
Required	 
( 
ErrorMessage 
=  
$str! 3
)3 4
]4 5
public		 
required		 
string		 
Name		 #
{		$ %
get		& )
;		) *
set		+ .
;		. /
}		0 1
[

 	
Range

	 
(

 
$num

 
,

 
long

 
.

 
MaxValue

 
,

  
ErrorMessage

! -
=

. /
$str

0 S
)

S T
]

T U
public 
required 
long 

Company_Id '
{( )
get* -
;- .
set/ 2
;2 3
}4 5
} 
} á
aD:\Fontys\2025-2026\Semester 3.1\Individueel project\Eventary\Eventary-API\CORE\Dto\CompanyDto.cs
	namespace 	
CORE
 
. 
Dto 
{ 
public 

class 

CompanyDto 
{ 
[ 	
Required	 
] 
public 
required "
long# '
Id( *
{+ ,
get- 0
;0 1
set2 5
;5 6
}7 8
[ 	
Required	 
] 
public 
required "
string# )
Name* .
{/ 0
get1 4
;4 5
set6 9
;9 :
}; <
}		 
}

 …
bD:\Fontys\2025-2026\Semester 3.1\Individueel project\Eventary\Eventary-API\CORE\Dto\EmployeeDto.cs
	namespace 	
CORE
 
. 
Dto 
{ 
public 

class 
EmployeeDto 
{ 
[ 	
Required	 
] 
public 
required "
long# '
Id( *
{+ ,
get- 0
;0 1
set2 5
;5 6
}7 8
[ 	
Required	 
] 
public 
required "
string# )
Name* .
{/ 0
get1 4
;4 5
set6 9
;9 :
}; <
[		 	
Required			 
]		 
[		 
EmailAddress		 
]		  
public		! '
required		( 0
string		1 7
Email		8 =
{		> ?
get		@ C
;		C D
set		E H
;		H I
}		J K
[

 	
Required

	 
]

 
public

 
required

 "
string

# )
Password

* 2
{

3 4
get

5 8
;

8 9
set

: =
;

= >
}

? @
[ 	
Required	 
] 
public 
bool 
IsAdmin &
{' (
get) ,
;, -
set. 1
;1 2
}3 4
[ 	
Required	 
] 
public 
bool 
StoragePermission 0
{1 2
get3 6
;6 7
set8 ;
;; <
}= >
[ 	
Required	 
] 
public 
bool 
OrderPermission .
{/ 0
get1 4
;4 5
set6 9
;9 :
}; <
[ 	
Required	 
] 
public 
bool 
EmployeePermission 1
{2 3
get4 7
;7 8
set9 <
;< =
}> ?
[ 	
Required	 
] 
public 
long 

Company_Id )
{* +
get, /
;/ 0
set1 4
;4 5
}6 7
} 
} Œ
^D:\Fontys\2025-2026\Semester 3.1\Individueel project\Eventary\Eventary-API\CORE\Dto\ItemDto.cs
	namespace 	
CORE
 
. 
Dto 
{ 
public 

class 
ItemDto 
{ 
[ 	
Required	 
] 
public 
required "
long# '
Id( *
{+ ,
get- 0
;0 1
set2 5
;5 6
}7 8
[ 	
Required	 
] 
public 
required "
string# )
Name* .
{/ 0
get1 4
;4 5
set6 9
;9 :
}; <
[		 	
Required			 
]		 
[

 	
Range

	 
(

 
$num

 
,

 
double

 
.

 
MaxValue

 $
,

$ %
ErrorMessage

& 2
=

3 4
$str

5 W
)

W X
]

X Y
public 
decimal 
Price 
{ 
get "
;" #
set$ '
;' (
}) *
[ 	
Required	 
] 
[ 	
Range	 
( 
$num 
, 
int 
. 
MaxValue 
, 
ErrorMessage  ,
=- .
$str/ M
)M N
]N O
public 
int 
Quantity 
{ 
get !
;! "
set# &
;& '
}( )
[ 	
Required	 
] 
public 
required "
string# )
ImageUrl* 2
{3 4
get5 8
;8 9
set: =
;= >
}? @
[ 	
Required	 
] 
public 
required "
long# '
Category_Id( 3
{4 5
get6 9
;9 :
set; >
;> ?
}@ A
[ 	
Required	 
] 
public 
required "
long# '

Company_Id( 2
{3 4
get5 8
;8 9
set: =
;= >
}? @
} 
} ƒ
_D:\Fontys\2025-2026\Semester 3.1\Individueel project\Eventary\Eventary-API\CORE\Dto\OrderDto.cs
	namespace 	
CORE
 
. 
Dto 
{ 
public 

class 
OrderDto 
{ 
[ 	
Required	 
] 
public 
long 
Id  
{! "
get# &
;& '
set( +
;+ ,
}- .
[ 	
Required	 
] 
public 
string 
?  
Name! %
{& '
get( +
;+ ,
set- 0
;0 1
}2 3
[		 	
Required			 
]		 
public		 
string		 
?		  
Address		! (
{		) *
get		+ .
;		. /
set		0 3
;		3 4
}		5 6
[

 	
EmailAddress

	 
]

 
public

 
string

 #
?

# $
Email

% *
{

+ ,
get

- 0
;

0 1
set

2 5
;

5 6
}

7 8
[ 	
Required	 
] 
[ 
	MaxLength 
( 
$num  
)  !
]! "
public" (
string) /
?/ 0
Phone1 6
{7 8
get9 <
;< =
set> A
;A B
}C D
[ 	
Required	 
] 
public 
DateTime !
	StartDate" +
{, -
get. 1
;1 2
set3 6
;6 7
}8 9
[ 	
Required	 
] 
public 
DateTime !
EndDate" )
{* +
get, /
;/ 0
set1 4
;4 5
}6 7
public 
string 
? 
Status 
{ 
get  #
;# $
set% (
;( )
}* +
public 
string 
? 
Note 
{ 
get !
;! "
set# &
;& '
}( )
[ 	
Required	 
] 
public 
long 

company_Id (
{) *
get+ .
;. /
set0 3
;3 4
}5 6
} 
} Ì
qD:\Fontys\2025-2026\Semester 3.1\Individueel project\Eventary\Eventary-API\CORE\Interfaces\ICategoryRepository.cs
	namespace 	
CORE
 
. 

Interfaces 
{ 
public 

	interface 
ICategoryRepository (
{ 
Task		 
<		 
IEnumerable		 
<		 
CategoryDto		 $
>		$ %
>		% &
GetAllAsync		' 2
(		2 3
)		3 4
;		4 5
Task

 
<

 
CategoryDto

 
?

 
>

 
GetByIdAsync

 '
(

' (
long

( ,
id

- /
)

/ 0
;

0 1
} 
} ú	
pD:\Fontys\2025-2026\Semester 3.1\Individueel project\Eventary\Eventary-API\CORE\Interfaces\ICompanyRepository.cs
	namespace 	
CORE
 
. 

Interfaces 
{ 
public 

	interface 
ICompanyRepository '
{ 
Task 
< 
IEnumerable 
< 

CompanyDto #
># $
>$ %
GetAllAsync& 1
(1 2
)2 3
;3 4
Task 
< 

CompanyDto 
? 
> 
GetByIdAsync &
(& '
long' +
id, .
). /
;/ 0
Task		 
<		 

CompanyDto		 
>		 
AddCompanyAsync		 (
(		( )

CompanyDto		) 3

companyDto		4 >
)		> ?
;		? @
Task

 
<

 
bool

 
>

 
UpdateCompanyAsync

 %
(

% &

CompanyDto

& 0

companyDto

1 ;
)

; <
;

< =
Task 
< 
bool 
> 
DeleteCompanyAsync %
(% &
long& *
id+ -
)- .
;. /
} 
} ï
qD:\Fontys\2025-2026\Semester 3.1\Individueel project\Eventary\Eventary-API\CORE\Interfaces\IEmployeeRepository.cs
	namespace 	
CORE
 
. 

Interfaces 
{ 
public 

	interface 
IEmployeeRepository (
{ 
Task		 
<		 
IEnumerable		 
<		 
EmployeeDto		 $
>		$ %
>		% &
GetAllAsync		' 2
(		2 3
)		3 4
;		4 5
Task

 
<

 
EmployeeDto

 
?

 
>

 
GetByIdAsync

 '
(

' (
long

( ,
id

- /
)

/ 0
;

0 1
Task 
AddEmployeeAsync 
( 
EmployeeDto )
employeeDto* 5
)5 6
;6 7
Task 
UpdateEmployeeAsync  
(  !
EmployeeDto! ,
employeeDto- 8
)8 9
;9 :
Task 
DeleteEmployeeAsync  
(  !
long! %
id& (
)( )
;) *
} 
} ¹

mD:\Fontys\2025-2026\Semester 3.1\Individueel project\Eventary\Eventary-API\CORE\Interfaces\IItemRepository.cs
	namespace 	
CORE
 
. 

Interfaces 
{ 
public 

	interface 
IItemRepository $
{ 
Task 
< 
IEnumerable 
< 
ItemDto  
>  !
>! "
GetAllAsync# .
(. /
)/ 0
;0 1
Task 
< 
ItemDto 
? 
> 
GetByIdAsync #
(# $
long$ (
id) +
)+ ,
;, -
Task		 
<		 
ItemDto		 
>		 
AddItemAsync		 "
(		" #
ItemDto		# *
itemDto		+ 2
)		2 3
;		3 4
Task

 
DeleteItemAsync

 
(

 
long

 !
id

" $
)

$ %
;

% &
Task 
UpdateItemAsync 
( 
ItemDto $
itemDto% ,
), -
;- .
Task 
< 
ItemDto 
? 
> 
GetByNameAsync %
(% &
string& ,
name- 1
)1 2
;2 3
} 
} Î
nD:\Fontys\2025-2026\Semester 3.1\Individueel project\Eventary\Eventary-API\CORE\Interfaces\IOrderRepository.cs
	namespace 	
CORE
 
. 

Interfaces 
{ 
public 

	interface 
IOrderRepository %
{ 
Task 
< 
IEnumerable 
< 
OrderDto !
>! "
>" #
GetAllAsync$ /
(/ 0
)0 1
;1 2
Task 
< 
OrderDto 
? 
> 
GetByIdAsync $
($ %
long% )
id* ,
), -
;- .
Task		 
AddOrderAsync		 
(		 
OrderDto		 #
orderDto		$ ,
)		, -
;		- .
Task

 
DeleteOrderAsync

 
(

 
long

 "
id

# %
)

% &
;

& '
Task 
UpdateOrderAsync 
( 
OrderDto &
orderDto' /
)/ 0
;0 1
} 
} —
bD:\Fontys\2025-2026\Semester 3.1\Individueel project\Eventary\Eventary-API\CORE\Models\Category.cs
	namespace 	
CORE
 
. 
Models 
{ 
public 

class 
Category 
{ 
public 
required 
long 
Id 
{  !
get" %
;% &
set' *
;* +
}, -
public 
required 
string 
Name #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
long 

Company_Id 
{  
get! $
;$ %
set& )
;) *
}+ ,
} 
}		 ù
aD:\Fontys\2025-2026\Semester 3.1\Individueel project\Eventary\Eventary-API\CORE\Models\Company.cs
	namespace 	
CORE
 
. 
Models 
{ 
public 

class 
Company 
{ 
public 
required 
long 
Id 
{  !
get" %
;% &
set' *
;* +
}, -
public 
required 
string 
Name #
{$ %
get& )
;) *
set+ .
;. /
}0 1
} 
} ù
bD:\Fontys\2025-2026\Semester 3.1\Individueel project\Eventary\Eventary-API\CORE\Models\Employee.cs
	namespace 	
CORE
 
. 
Models 
{ 
public 

class 
Employee 
{ 
public 
required 
long 
Id 
{  !
get" %
;% &
set' *
;* +
}, -
public 
required 
string 
Name #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
required 
string 
Email $
{% &
get' *
;* +
set, /
;/ 0
}1 2
public 
required 
string 
Password '
{( )
get* -
;- .
set/ 2
;2 3
}4 5
public		 
bool		 
IsAdmin		 
{		 
get		 !
;		! "
set		# &
;		& '
}		( )
public

 
bool

 
StoragePermission

 %
{

& '
get

( +
;

+ ,
set

- 0
;

0 1
}

2 3
public 
bool 
OrderPermission #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
bool 
EmployeePermission &
{' (
get) ,
;, -
set. 1
;1 2
}3 4
public 
long 

Company_Id 
{  
get! $
;$ %
set& )
;) *
}+ ,
} 
} ½
^D:\Fontys\2025-2026\Semester 3.1\Individueel project\Eventary\Eventary-API\CORE\Models\Item.cs
	namespace 	
CORE
 
. 
Models 
{ 
public 

class 
Item 
{ 
public 
required 
long 
Id 
{  !
get" %
;% &
set' *
;* +
}, -
public 
required 
string 
Name #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
required 
decimal 
Price  %
{& '
get( +
;+ ,
set- 0
;0 1
}2 3
public 
required 
int 
Quantity $
{% &
get' *
;* +
set, /
;/ 0
}1 2
public		 
required		 
string		 
ImageUrl		 '
{		( )
get		* -
;		- .
set		/ 2
;		2 3
}		4 5
public

 
long

 
Category_Id

 
{

  !
get

" %
;

% &
set

' *
;

* +
}

, -
public 
long 

Company_Id 
{  
get! $
;$ %
set& )
;) *
}+ ,
} 
} ú
_D:\Fontys\2025-2026\Semester 3.1\Individueel project\Eventary\Eventary-API\CORE\Models\Order.cs
	namespace 	
CORE
 
. 
Models 
{ 
public 

class 
Order 
{ 
public 
long 
Id 
{ 
get 
; 
set !
;! "
}# $
public 
string 
? 
Name 
{ 
get !
;! "
set# &
;& '
}( )
public 
string 
? 
Address 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
? 
Email 
{ 
get "
;" #
set$ '
;' (
}) *
public		 
string		 
?		 
Phone		 
{		 
get		 "
;		" #
set		$ '
;		' (
}		) *
public

 
DateTime

 
	StartDate

 !
{

" #
get

$ '
;

' (
set

) ,
;

, -
}

. /
public 
DateTime 
EndDate 
{  !
get" %
;% &
set' *
;* +
}, -
public 
string 
? 
Status 
{ 
get  #
;# $
set% (
;( )
}* +
public 
string 
? 
Note 
{ 
get !
;! "
set# &
;& '
}( )
public 
long 

company_Id 
{  
get! $
;$ %
set& )
;) *
}+ ,
} 
} Ž
kD:\Fontys\2025-2026\Semester 3.1\Individueel project\Eventary\Eventary-API\CORE\Services\CategoryService.cs
	namespace		 	
CORE		
 
.		 
Services		 
{

 
public 

class 
CategoryService  
{ 
private 
readonly 
ICategoryRepository ,
_categoryRepository- @
;@ A
public 
CategoryService 
( 
ICategoryRepository 2
categoryRepository3 E
)E F
{ 	
_categoryRepository 
=  !
categoryRepository" 4
;4 5
} 	
public 
async 
Task 
< 
IEnumerable %
<% &
CategoryDto& 1
>1 2
>2 3!
GetAllCategoriesAsync4 I
(I J
)J K
{ 	
return 
await 
_categoryRepository ,
., -
GetAllAsync- 8
(8 9
)9 :
;: ;
} 	
public 
async 
Task 
< 
CategoryDto %
?% &
>& ' 
GetCategoryByIdAsync( <
(< =
long= A
idB D
)D E
{ 	
return 
await 
_categoryRepository ,
., -
GetByIdAsync- 9
(9 :
id: <
)< =
;= >
} 	
} 
} ê)
jD:\Fontys\2025-2026\Semester 3.1\Individueel project\Eventary\Eventary-API\CORE\Services\CompanyService.cs
	namespace 	
CORE
 
. 
Services 
{ 
public 

class 
CompanyService 
{ 
private 
readonly 
ICompanyRepository +
_companyRepository, >
;> ?
public

 
CompanyService

 
(

 
ICompanyRepository

 0
companyRepository

1 B
)

B C
{ 	
_companyRepository 
=  
companyRepository! 2
;2 3
} 	
public 
async 
Task 
< 
IEnumerable %
<% &

CompanyDto& 0
>0 1
>1 2 
GetAllCompaniesAsync3 G
(G H
)H I
{ 	
return 
await 
_companyRepository +
.+ ,
GetAllAsync, 7
(7 8
)8 9
;9 :
} 	
public 
async 
Task 
< 

CompanyDto $
?$ %
>% &
GetCompanyByIdAsync' :
(: ;
int; >
id? A
)A B
{ 	
return 
await 
_companyRepository +
.+ ,
GetByIdAsync, 8
(8 9
id9 ;
); <
;< =
} 	
public 
async 
Task 
< 

CompanyDto $
>$ %
AddCompanyAsync& 5
(5 6

CompanyDto6 @

companyDtoA K
)K L
{ 	
ValidateCompanyName 
(  

companyDto  *
.* +
Name+ /
)/ 0
;0 1
await %
EnsureCompanyDoesNotExist +
(+ ,

companyDto, 6
.6 7
Id7 9
)9 :
;: ;
return 
await 
_companyRepository +
.+ ,
AddCompanyAsync, ;
(; <

companyDto< F
)F G
;G H
} 	
public!! 
async!! 
Task!! 
<!! 
bool!! 
>!! 
UpdateCompanyAsync!!  2
(!!2 3

CompanyDto!!3 =

companyDto!!> H
)!!H I
{"" 	
ValidateCompanyName## 
(##  

companyDto##  *
.##* +
Name##+ /
)##/ 0
;##0 1
await$$ 
EnsureCompanyExists$$ %
($$% &

companyDto$$& 0
.$$0 1
Id$$1 3
)$$3 4
;$$4 5
return&& 
await&& 
_companyRepository&& +
.&&+ ,
UpdateCompanyAsync&&, >
(&&> ?

companyDto&&? I
)&&I J
;&&J K
}'' 	
public)) 
async)) 
Task)) 
<)) 
bool)) 
>)) 
DeleteCompanyAsync))  2
())2 3
long))3 7
id))8 :
))): ;
{** 	
await++ 
EnsureCompanyExists++ %
(++% &
id++& (
)++( )
;++) *
return-- 
await-- 
_companyRepository-- +
.--+ ,
DeleteCompanyAsync--, >
(--> ?
id--? A
)--A B
;--B C
}.. 	
private11 
static11 
void11 
ValidateCompanyName11 /
(11/ 0
string110 6
name117 ;
)11; <
{22 	
if33 
(33 
string33 
.33 
IsNullOrWhiteSpace33 )
(33) *
name33* .
)33. /
)33/ 0
{44 
throw55 
new55 
ArgumentException55 +
(55+ ,
$str55, K
)55K L
;55L M
}66 
}77 	
private99 
async99 
Task99 
EnsureCompanyExists99 .
(99. /
long99/ 3
id994 6
)996 7
{:: 	
var;; 
existingCompany;; 
=;;  !
await;;" '
_companyRepository;;( :
.;;: ;
GetByIdAsync;;; G
(;;G H
id;;H J
);;J K
;;;K L
if<< 
(<< 
existingCompany<< 
==<<  "
null<<# '
)<<' (
{== 
throw>> 
new>> 
ArgumentException>> +
(>>+ ,
$str>>, @
)>>@ A
;>>A B
}?? 
}@@ 	
privateBB 
asyncBB 
TaskBB %
EnsureCompanyDoesNotExistBB 4
(BB4 5
longBB5 9
idBB: <
)BB< =
{CC 	
varDD 
existingCompanyDD 
=DD  !
awaitDD" '
_companyRepositoryDD( :
.DD: ;
GetByIdAsyncDD; G
(DDG H
idDDH J
)DDJ K
;DDK L
ifEE 
(EE 
existingCompanyEE 
!=EE  "
nullEE# '
)EE' (
{FF 
throwGG 
newGG 
ArgumentExceptionGG +
(GG+ ,
$strGG, X
)GGX Y
;GGY Z
}HH 
}II 	
}JJ 
}KK Ä
kD:\Fontys\2025-2026\Semester 3.1\Individueel project\Eventary\Eventary-API\CORE\Services\EmployeeService.cs
	namespace 	
CORE
 
. 
Services 
{ 
public 

class 
EmployeeService  
{		 
private

 
readonly

 
IEmployeeRepository

 ,
_employeeRepository

- @
;

@ A
public 
EmployeeService 
( 
IEmployeeRepository 2
employeeRepository3 E
)E F
{ 	
_employeeRepository 
=  !
employeeRepository" 4
;4 5
} 	
public 
async 
Task 
< 
IEnumerable %
<% &
EmployeeDto& 1
>1 2
>2 3 
GetAllEmployeesAsync4 H
(H I
)I J
{ 	
return 
await 
_employeeRepository ,
., -
GetAllAsync- 8
(8 9
)9 :
;: ;
} 	
public 
async 
Task 
< 
EmployeeDto %
?% &
>& ' 
GetEmployeeByIdAsync( <
(< =
long= A
idB D
)D E
{ 	
return 
await 
_employeeRepository ,
., -
GetByIdAsync- 9
(9 :
id: <
)< =
;= >
} 	
public 
async 
Task 
AddEmployeeAsync *
(* +
EmployeeDto+ 6
employeeDto7 B
)B C
{ 	
await 
_employeeRepository %
.% &
AddEmployeeAsync& 6
(6 7
employeeDto7 B
)B C
;C D
} 	
public   
async   
Task   
UpdateEmployeeAsync   -
(  - .
EmployeeDto  . 9
employeeDto  : E
)  E F
{!! 	
await"" 
_employeeRepository"" %
.""% &
UpdateEmployeeAsync""& 9
(""9 :
employeeDto"": E
)""E F
;""F G
}## 	
public%% 
async%% 
Task%% 
DeleteEmployeeAsync%% -
(%%- .
long%%. 2
id%%3 5
)%%5 6
{&& 	
await'' 
_employeeRepository'' %
.''% &
DeleteEmployeeAsync''& 9
(''9 :
id'': <
)''< =
;''= >
}(( 	
})) 
}** Ÿ'
gD:\Fontys\2025-2026\Semester 3.1\Individueel project\Eventary\Eventary-API\CORE\Services\ItemService.cs
	namespace 	
CORE
 
. 
Services 
{ 
public 

class 
ItemService 
{		 
private

 
readonly

 
IItemRepository

 (
_itemRepository

) 8
;

8 9
public 
ItemService 
( 
IItemRepository *
itemRepository+ 9
)9 :
{ 	
_itemRepository 
= 
itemRepository ,
;, -
} 	
public 
async 
Task 
< 
IEnumerable %
<% &
ItemDto& -
>- .
>. /
GetAllItemsAsync0 @
(@ A
)A B
{ 	
return 
await 
_itemRepository (
.( )
GetAllAsync) 4
(4 5
)5 6
;6 7
} 	
public 
async 
Task 
< 
ItemDto !
?! "
>" #
GetItemByIdAsync$ 4
(4 5
long5 9
id: <
)< =
{ 	
return 
await 
_itemRepository (
.( )
GetByIdAsync) 5
(5 6
id6 8
)8 9
;9 :
} 	
public 
async 
Task 
< 
ItemDto !
>! "
AddItemAsync# /
(/ 0
ItemDto0 7
itemDto8 ?
)? @
{ 	
var 
existingItem 
= 
await $
_itemRepository% 4
.4 5
GetByNameAsync5 C
(C D
itemDtoD K
.K L
NameL P
)P Q
;Q R
if 
( 
existingItem 
!= 
null  $
)$ %
{ 
throw   
new   
ArgumentException   +
(  + ,
$str  , X
)  X Y
;  Y Z
}!! 
if## 
(## 
itemDto## 
.## 
Quantity##  
<##! "
$num### $
)##$ %
{$$ 
throw%% 
new%% 
ArgumentException%% +
(%%+ ,
$str%%, J
)%%J K
;%%K L
}&& 
if'' 
('' 
itemDto'' 
.'' 
Price'' 
<'' 
$num''  !
)''! "
{(( 
throw)) 
new)) 
ArgumentException)) +
())+ ,
$str)), G
)))G H
;))H I
}** 
var,, 
	addedItem,, 
=,, 
await,, !
_itemRepository,," 1
.,,1 2
AddItemAsync,,2 >
(,,> ?
itemDto,,? F
),,F G
;,,G H
return-- 
	addedItem-- 
;-- 
}.. 	
public00 
async00 
Task00 
UpdateItemAsync00 )
(00) *
ItemDto00* 1
itemDto002 9
)009 :
{11 	
var22 
existingItem22 
=22 
await22 $
_itemRepository22% 4
.224 5
GetByNameAsync225 C
(22C D
itemDto22D K
.22K L
Name22L P
)22P Q
;22Q R
if33 
(33 
existingItem33 
!=33 
null33  $
&&33% '
existingItem33( 4
.334 5
Id335 7
!=338 :
itemDto33; B
.33B C
Id33C E
)33E F
{44 
throw55 
new55 
ArgumentException55 +
(55+ ,
$str55, X
)55X Y
;55Y Z
}66 
if88 
(88 
itemDto88 
.88 
Quantity88  
<88! "
$num88# $
)88$ %
{99 
throw:: 
new:: 
ArgumentException:: +
(::+ ,
$str::, J
)::J K
;::K L
};; 
if<< 
(<< 
itemDto<< 
.<< 
Price<< 
<<< 
$num<<  !
)<<! "
{== 
throw>> 
new>> 
ArgumentException>> +
(>>+ ,
$str>>, G
)>>G H
;>>H I
}?? 
awaitAA 
_itemRepositoryAA !
.AA! "
UpdateItemAsyncAA" 1
(AA1 2
itemDtoAA2 9
)AA9 :
;AA: ;
}BB 	
publicDD 
asyncDD 
TaskDD 
DeleteItemAsyncDD )
(DD) *
longDD* .
idDD/ 1
)DD1 2
{EE 	
awaitFF 
_itemRepositoryFF !
.FF! "
DeleteItemAsyncFF" 1
(FF1 2
idFF2 4
)FF4 5
;FF5 6
}GG 	
}HH 
}II û
hD:\Fontys\2025-2026\Semester 3.1\Individueel project\Eventary\Eventary-API\CORE\Services\OrderService.cs
	namespace 	
CORE
 
. 
Services 
{ 
public 

class 
OrderService 
{ 
private 
readonly 
IOrderRepository )
_orderRepository* :
;: ;
public

 
OrderService

 
(

 
IOrderRepository

 ,
orderRepository

- <
)

< =
{ 	
_orderRepository 
= 
orderRepository .
;. /
} 	
public 
async 
Task 
< 
IEnumerable %
<% &
OrderDto& .
>. /
>/ 0
GetAllOrdersAsync1 B
(B C
)C D
{ 	
return 
await 
_orderRepository )
.) *
GetAllAsync* 5
(5 6
)6 7
;7 8
} 	
public 
async 
Task 
< 
OrderDto "
?" #
># $
GetOrderByIdAsync% 6
(6 7
long7 ;
id< >
)> ?
{ 	
return 
await 
_orderRepository )
.) *
GetByIdAsync* 6
(6 7
id7 9
)9 :
;: ;
} 	
public 
async 
Task 
AddOrderAsync '
(' (
OrderDto( 0
orderDto1 9
)9 :
{ 	
ValidateOrderDates 
( 
orderDto '
)' (
;( )
await 
_orderRepository "
." #
AddOrderAsync# 0
(0 1
orderDto1 9
)9 :
;: ;
} 	
public 
async 
Task 
DeleteOrderAsync *
(* +
long+ /
id0 2
)2 3
{   	
await!! 
EnsureOrderExists!! #
(!!# $
id!!$ &
)!!& '
;!!' (
await"" 
_orderRepository"" "
.""" #
DeleteOrderAsync""# 3
(""3 4
id""4 6
)""6 7
;""7 8
}## 	
public%% 
async%% 
Task%% 
UpdateOrderAsync%% *
(%%* +
OrderDto%%+ 3
orderDto%%4 <
)%%< =
{&& 	
await'' 
EnsureOrderExists'' #
(''# $
orderDto''$ ,
.'', -
Id''- /
)''/ 0
;''0 1
await(( 
_orderRepository(( "
.((" #
UpdateOrderAsync((# 3
(((3 4
orderDto((4 <
)((< =
;((= >
})) 	
private++ 
static++ 
void++ 
ValidateOrderDates++ .
(++. /
OrderDto++/ 7
orderDto++8 @
)++@ A
{,, 	
if-- 
(-- 
orderDto-- 
.-- 
	StartDate-- "
>=--# %
orderDto--& .
.--. /
EndDate--/ 6
)--6 7
{.. 
throw// 
new// 
ArgumentException// +
(//+ ,
$str//, U
)//U V
;//V W
}00 
}11 	
private33 
async33 
Task33 
EnsureOrderExists33 ,
(33, -
long33- 1
id332 4
)334 5
{44 	
var55 
existingOrder55 
=55 
await55  %
_orderRepository55& 6
.556 7
GetByIdAsync557 C
(55C D
id55D F
)55F G
;55G H
if66 
(66 
existingOrder66 
==66  
null66! %
)66% &
{77 
throw88 
new88 
ArgumentException88 +
(88+ ,
$str88, >
)88> ?
;88? @
}99 
}:: 	
};; 
}<< 